import transformers
import sentence_transformers
import torch
import time


print(transformers.__version__)
print(sentence_transformers.__version__)
print(torch.__version__)

"""
GLiNER_NER_Model.py
Show how to use the saved Solution 3 models for inference.
"""

import os
import joblib
import torch
from sentence_transformers import SentenceTransformer

# 1๏ธโฃ Set device (GPU if available)
device = "cuda" if torch.cuda.is_available() else "cpu"
print(f"Using device: {device}")

# 2๏ธโฃ Paths
save_dir = "./saved_model_sbert"  # adjust if needed
aspect_names = ["Pricing", "Appointments", "Medical Staff", "Customer Service", "Emergency Services"]

# 3๏ธโฃ Load the 5 classifiers
models = [joblib.load(os.path.join(save_dir, f"{aspect}_clf.joblib")) for aspect in aspect_names]

# 4๏ธโฃ Load the sentence-transformer embedder
# Use a proper pretrained Arabic SBERT
embedder_path = os.path.join(save_dir, "sentence_transformer")
if os.path.exists(embedder_path):
    embedder = SentenceTransformer(embedder_path, device=device)
else:
    # fallback if not saved locally
    embedder = SentenceTransformer("asafaya/bert-base-arabic", device=device)

# 5๏ธโฃ Prediction function
def predict_review(review_text):
    """
    Input: single Arabic review (string)
    Output: dictionary of aspect -> predicted label [0,1,2,3]
    """
    embedding = embedder.encode([review_text], convert_to_tensor=True)
    preds = [model.predict(embedding.cpu().numpy())[0] for model in models]
    return dict(zip(aspect_names, preds))

# 6๏ธโฃ Test examples
examples = [
    "ุงูุฃุณุนุงุฑ ูุฑุชูุนุฉ ุฌุฏูุง ููู ุงูุฃุทุจุงุก ููุชุงุฒูู ูู ุงูุชุนุงูู ูุน ุงููุฑุถู.",
    "ุงูููุงุนูุฏ ุฏุงุฆูุงู ูุชุฃุฎุฑุฉ ูุงูุฎุฏูุฉ ูู ุงูุงุณุชูุจุงู ุณูุฆุฉ.",
    "ุงูุทุงูู ุงูุทุจู ูููู ููุบุงูุฉ ููุดุฑุญ ูู ุดูุก ุจุตุจุฑ ููุถูุญ.",
    "ุงููุณุชุดูู ูุธูู ุฌุฏูุง ูุงูุฎุฏูุงุช ุงูุทุงุฑุฆุฉ ุณุฑูุนุฉ ููุนุงูุฉ.",
    "ุฎุฏูุฉ ุงูุนููุงุก ุณูุฆุฉ ููุง ููุชููู ุจููุงุญุธุงุช ุงููุฑุถู.",
    "ุงูุฃุทุจุงุก ููุชุงุฒูู ููู ุชูููุฉ ุงูุนูุงุฌ ุบูุฑ ูุจุฑุฑุฉ.",
    "ุงูุงุณุชูุจุงู ูุทูู ูุงูููุงุนูุฏ ุฏูููุฉ ููู ูุณู ุงูุทูุงุฑุฆ ูุฒุฏุญู ุฌุฏูุง.",
    "ุงููุณุชุดูู ูุฏูู ูุงูุฃุฌูุฒุฉ ุงูุทุจูุฉ ุชุญุชุงุฌ ูุชุญุฏูุซ ุนุงุฌู.",
    "ุงูุนูุงูุฉ ุจุงููุฑูุถ ููุชุงุฒุฉ ูุงููุฑูู ุงูุทุจู ูุชุนุงูู ุฏุงุฆููุง.",
    "ุงูุฃุณุนุงุฑ ูุฑุชูุนุฉ ูุงูููุงุนูุฏ ุตุนุจุฉ ูุงูุญุฌุฒ ุนุจุฑ ุงูุฅูุชุฑูุช ุบูุฑ ุนููู."
]

# 7๏ธโฃ Run predictions and print
for review in examples:
    prediction = predict_review(review)
    print(f"Review: {review}")
    print(f"Prediction: {prediction}")
    print("-" * 60)




#Time tested examples
reviews = [
    "ุงูุฃุณุนุงุฑ ูุฑุชูุนุฉ ุฌุฏูุง ููุงุฑูุฉ ุจุงูุฎุฏูุฉ ุงูููุฏูุฉ.",  # Pricing negative
    "ุงูููุงุนูุฏ ุฏูููุฉ ูุงูุชูุธูู ููุชุงุฒ ุฏุงุฎู ุงููุณุชุดูู.",  # Appointments positive
    "ุงูุทุงูู ุงูุทุจู ูุญุชุฑู ุฌุฏูุง ููุชุนุงูู ุจูุทู ูุน ุงููุฑุถู.",  # Medical Staff positive
    "ุฎุฏูุฉ ุงูุนููุงุก ุจุทูุฆุฉ ููุง ุชุฑุฏ ุนูู ุงูุงุชุตุงูุงุช.",  # Customer Service negative
    "ูุณู ุงูุทูุงุฑุฆ ุณุฑูุน ุฌุฏูุง ูุงูุงุณุชุฌุงุจุฉ ููุฑูุฉ.",  # Emergency positive
    "ุงููุณุชุดูู ูุธูู ููู ุงูุฃุณุนุงุฑ ูุจุงูุบ ูููุง.",  # Mixed: good hygiene, bad pricing
    "ุงูููุธููู ูู ุงูุงุณุชูุจุงู ุบูุฑ ูุชุนุงูููู ุฅุทูุงููุง.",  # Customer Service negative
    "ุงูุฃุทุจุงุก ูุดุฑุญูู ุงูุญุงูุฉ ุจุดูู ูุงุถุญ ููุณุงุนุฏูู ุงููุฑูุถ ุนูู ููู ุงูุนูุงุฌ.",  # Medical Staff positive
    "ุงูููุงุนูุฏ ุชุชุฃุฎุฑ ุฏุงุฆููุง ููุง ููุฌุฏ ุงุญุชุฑุงู ููููุช.",  # Appointments negative
    "ุฎุฏูุฉ ุงูุทูุงุฑุฆ ุจุทูุฆุฉ ุฌุฏูุง ููุง ุชูุฌุฏ ูุชุงุจุนุฉ ุฌูุฏุฉ ููุญุงูุงุช."  # Emergency negative
]

# Start timing
start_time = time.time()

for i, review in enumerate(reviews, 1):
    prediction = predict_review(review)
    print(f"{i}. Review: {review}")
    print(f"Prediction: {prediction}")
    print("-" * 60)

# End timing
end_time = time.time()
elapsed = end_time - start_time

print(f"๐ Total inference time for {len(reviews)} reviews: {elapsed:.3f} seconds")
print(f"โฑ๏ธ Average time per review: {elapsed / len(reviews):.3f} seconds")